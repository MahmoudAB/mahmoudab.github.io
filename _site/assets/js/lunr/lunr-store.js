var store = [{
        "title": "Building RESTful APIs with Node.js and Express",
        "excerpt":"In this article we go over the basics of how to develop an api using nodejs and express, utilizing mongo as our database to persist data.   The main idea behind this api is to manage an inventory chest. The api provides endpoints to add, view, update, and delete items in a chest. You can find the source code here: Inventory-Chest   To get started you must have some javascript knowledge   Step 1: Install nodejs   Step 2: Install mongo   Step 3: Lets get started with setting up your node project      Open a terminal and navigate to a directory of your choice   Create a new directory for the project      mkdir inventory-chest           Run the following command      npm init                 Follow the prompts:                    Enter your name and description           You can leave the rest as default for now           Voila you should be all set to start coding and adding dependencies                           Step 4: Lets add all the dependencies we need      navigate to the project directory and run the following command to install the packages we need:     npm i express body-parser express mongo mongoose nodemon           Now we will add specific dependencies for dev     npm i --save-dev babel-cli -babel-preset-env babel-preset-stage0                Now lets change our startup script in the package.json file              in your file you will see:          \"scripts\": {   \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"  },                       change it to :          \"scripts\": {   \"start\": \"nodemon ./index.js --exec babel-node -e js\"  }                           Step 5: Now lets start coding!           create new index.js file            In the index.js file we will start by importing express        import express from 'express';           We then declare two const      const app = express();  const PORT = 4000;           lets add a get endpoint      app.get('/', (req, res) =&gt;      res.send('Hello, welcome to your chest!')  );           Now lets start our sever and log that we are listening on port 4000:      app.listen(PORT, () =&gt;       console.log(`Your server is sunning on port ${PORT}`)  );          Step 6: Let’s test run our application!       To run the project, navigate to the main project dir and run the following command:      npm start           You can use your browser and navigate to http://localhost:4000        Or you can download and test your application using Postman       You should see our message: Hello, welcome to your chest!       Step 7: Now lets add routes   Before moving forward, you might be asking yourself, what are routes?   And that is a great  question, in the context of express http requests, it refers to how the endpoints in your application respond to the client requests.           Before we do that, lets give a structure to our project:                       In the main project folder, let add a new src folder            mkdir src                                inside src folder we will add 3 more folders (controllers, models, routes)          mkdir {controllers,models,routes}                           Add a new file and call it inventoryChestRoutes.js under the routes dir   we can code our different routes                     start off by creating a const that will take in app and set paths as follows:                const routes = (app) =&gt; {}                                lets start by defining our first path /chest inside the above mentions {}.  Inside our path definition we will also add one GET method and handle it:            app.route(\"/chest\")  .get((req, res) =&gt;      res.send(\"GET request successfull\"))                       now lets add a second path for POST          app.route(\"/item\")  .post((req, res) =&gt;      res.send(\"POST request successfull\"))                       finally a third path that includes an id /item/:itemId  and  we will add two different methods(PUT and DELETE) and handle the incoming request:           app.route(\"/item/:itemId\")  .put((req, res) =&gt;       res.send(\"PUT request successfull\"))  .delete((req, res) =&gt;       res.send(\"DELETE request successfull\"))                                Finally all that is left to do is to export our routes as follows:            export default routes                                your inventoryChestRoutes.js should be looking like this:            const routes = (app) =&gt; {      app.route(\"/chest\")          .get((req, res) =&gt;              res.send(\"GET request successfull\"))      app.route(\"/item\")          .post((req, res) =&gt;              res.send(\"POST request successfull\"))      app.route(\"/item/:itemId\")          .put((req, res) =&gt;               res.send(\"PUT request successfull\"))      .delete((req, res) =&gt;               res.send(\"DELETE request successfull\")) }    export default routes                        Now open postman and test all the new paths we just added!           Step 8: Now its time to store something in our chest           We will start off by defining what is an item we can put in our chest. Since we are using Mongo as our database, we will need to set up our mongo connection:              Make sure that your local mongodb is up and running       Navigate to the main project directory and open the index.js file       Start by importing mongoose and body-parser (what is used to parse the data incoming from mongo to our API)          import mongoose from 'mongoose'  import bodyParser from 'body-parser'                        Set up your connection to your local mongo          mongoose.Promise = global.Promise   mongoose.connect('mongodb://localhost/Chestdb',{      useNewUrlParser: true,      useUnifiedTopology: true  });                       Set up the bodyParser          // bodyparser setup  app.use(bodyParser.urlencoded({ extended: true }));  app.use(bodyParser.json())                       Make sure express accepts json objects          app.use(express.json());                                Now under the /src/models folder create a new file and call it InventoryModel.js, and add the following code that defines the schema of what will be storing            import mongoose from \"mongoose\";   const Schema = mongoose.Schema   export const ChestInventorySchema = new Schema ({      name: String,      created_date: { type: Date, default: Date.now }  });                                Now under the /src/controllers folder create a new file and call it InventoryController.js, and add the following code instantiates an item object            import mongoose from \"mongoose\";  import { ItemSchema } from \"../models/inventoryChestModel\";   const Item = mongoose.model('chest', ItemSchema)                           Now lets add some code to save an item in our chest.                     Under the /src/controllers/InventoryChestController.js add the following block of code:            export const addNewItem = (req,res) =&gt; {  let newItem = new Item(req.body)   newItem.save((err, contact) =&gt; {      if(err){          res.send(err)      }      res.json(contact);       })  }                                All we need now is to wire our routes to the new code we just added, on the InventoryChestRoutes.js file add the following code:                      At the beginning of the file:                    import { addNewItem } from \"../controllers/InventoryChestController\"                              Now change your post route                    app.route(\"/item\")      .post(addNewItem)                              Your InventoryChestRoutes.js should be looking like this now:                    import { addNewItem } from \"../controllers/InventoryChestController\"   const routes = (app) =&gt; {      app.route(\"/chest\")          .get((req, res) =&gt;              res.send(\"GET request successfull\"))      app.route(\"/item\")          .post(addNewItem)      app.route(\"/item/:itemId\")          .put((req, res) =&gt;               res.send(\"PUT request successfull\"))          .delete((req, res) =&gt;               res.send(\"DELETE request successfull\"))  }    export default routes                                Now lets display our chest.              Same process as saving an item, open /src/controllers/InventoryChestController.js and add the following block of code:            export const getChest = (req, res) =&gt; {  Item.find({}, (err, item) =&gt; {      if(err){          res.send(err)      }      res.json(item)   })  }          This code snipped queries our mongo database with the Item.find, the first argument {} represents everything in the database collection. So we are asking mondo to return every item stored                       Now same as for adding an item, lets modify our InventoryChestRoutes to point to our controller code:                      At the beginning of the file add getChest to the imports:                    import { addNewItem, getChest } from \"../controllers/InventoryChestController\"                              Now change your get route                    app.route(\"/item\")      .post(getChest)                                As you may have noticed the process is to add your Controller and then make sure your route connects to that controller. A rinse and repeat process, this is how your code should look like with UPDATE, DELETE, and GET by Id:              InventoryChestController.js                import mongoose from \"mongoose\";      import { ItemSchema } from \"../models/InventoryChestModel\";       const Item = mongoose.model('chest', ItemSchema)       export const addNewItem = (req,res) =&gt; {          let newItem = new Item(req.body)           newItem.save((err, contact) =&gt; {              if(err){                  res.send(err)              }              res.json(contact);           })      }       export const getChest = (req, res) =&gt; {          Item.find({}, (err, item) =&gt; {              if(err){                  res.send(err)              }              res.json(item)           })      }       export const getItemWithId = (req, res) =&gt; {          Item.findById(req.params.itemId, (err, item) =&gt; {              if(err){                  res.send(err)              }              res.json(item)           })      }       export const updateItem = (req, res) =&gt; {          Item.findOneAndUpdate({_id: req.params.itemId}, req.body,{new: true, useFindAndModify: false },               (err, item) =&gt; {                  if(err){                      res.send(err)                  }                  res.json(item)           })      }       export const deleteItem = (req, res) =&gt; {          Item.remove({_id: req.params.itemId}, (err, item) =&gt; {              if(err){                  res.send(err)              }              res.json({message: 'successfully deleted item'})           })      }                       InventoryChestRoutes.js                import { addNewItem,               getChest,              getItemWithId,              updateItem,              deleteItem      } from \"../controllers/InventoryChestController\"       const routes = (app) =&gt; {          app.route(\"/chest\")              .get(getChest)          app.route(\"/item\")              .post(addNewItem)          app.route(\"/item/:itemId\")              .get(getItemWithId)              .put(updateItem)              .delete(deleteItem)      }        export default routes                With these final changes, our api is complete. We are able to add a new item in our chest, update the quantity of that item, view an item by its ID, we can also view all items in our chest, we can also delete an item we don’t want anymore. Now go ahead and test the application using Postman, feel free to change the code and add your own twist to it, hope you enjoyed and had fun, and most importantly learned something new.      Mahmoud Abdel Basset  ","categories": ["software-development"],
        "tags": ["nodejs","APIs","rest","express"],
        "url": "/blog/software-development/building-restful-APIs-Nodejs-And-Express/",
        "teaser": null
      },{
        "title": "Hello World",
        "excerpt":"Hello World! Welcome to my blog! In this blog I will document the things a learn in my software development journey.   Thanks for taking the time to explore and read this article. I would like to say that I am big proponent of learning, and I want to congratulate you in seeking knowledge, here’s an interesting and cool quote on learning:      “The more that you read, the more things you will know. The more that you learn, the more places you’ll go.” ― Dr. Seuss    I encourage you to apply the concepts you read in this blog, the real experience is in doing and not reading. Another cool quote:      “Tell me and I forget, teach me and I may remember, involve me and I learn.”    – Benjamin Franklin   I hope you get a thing or two from this blog, feel free to reach out to me on my socials for any feedback, and don’t forget to keep on learning!   until next time!      Mahmoud Abdel Basset  ","categories": ["hello"],
        "tags": ["hello","world"],
        "url": "/blog/hello/hello-world/",
        "teaser": null
      }]
